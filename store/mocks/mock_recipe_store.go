// Code generated by MockGen. DO NOT EDIT.
// Source: store/recipe_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/gaanon/gorecipes_v2/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRecipeStore is a mock of RecipeStore interface.
type MockRecipeStore struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeStoreMockRecorder
}

// MockRecipeStoreMockRecorder is the mock recorder for MockRecipeStore.
type MockRecipeStoreMockRecorder struct {
	mock *MockRecipeStore
}

// NewMockRecipeStore creates a new mock instance.
func NewMockRecipeStore(ctrl *gomock.Controller) *MockRecipeStore {
	mock := &MockRecipeStore{ctrl: ctrl}
	mock.recorder = &MockRecipeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeStore) EXPECT() *MockRecipeStoreMockRecorder {
	return m.recorder
}

// CreateRecipe mocks base method.
func (m *MockRecipeStore) CreateRecipe(ctx context.Context, recipeReq *models.RecipeRequest) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", ctx, recipeReq)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *MockRecipeStoreMockRecorder) CreateRecipe(ctx, recipeReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockRecipeStore)(nil).CreateRecipe), ctx, recipeReq)
}

// DeleteRecipe mocks base method.
func (m *MockRecipeStore) DeleteRecipe(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipe", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockRecipeStoreMockRecorder) DeleteRecipe(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockRecipeStore)(nil).DeleteRecipe), ctx, id)
}

// GetRecipeByID mocks base method.
func (m *MockRecipeStore) GetRecipeByID(ctx context.Context, id uuid.UUID) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeByID", ctx, id)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeByID indicates an expected call of GetRecipeByID.
func (mr *MockRecipeStoreMockRecorder) GetRecipeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeByID", reflect.TypeOf((*MockRecipeStore)(nil).GetRecipeByID), ctx, id)
}

// ListRecipes mocks base method.
func (m *MockRecipeStore) ListRecipes(ctx context.Context) ([]*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipes", ctx)
	ret0, _ := ret[0].([]*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipes indicates an expected call of ListRecipes.
func (mr *MockRecipeStoreMockRecorder) ListRecipes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipes", reflect.TypeOf((*MockRecipeStore)(nil).ListRecipes), ctx)
}

// UpdateRecipe mocks base method.
func (m *MockRecipeStore) UpdateRecipe(ctx context.Context, id uuid.UUID, recipeReq *models.RecipeRequest) (*models.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", ctx, id, recipeReq)
	ret0, _ := ret[0].(*models.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockRecipeStoreMockRecorder) UpdateRecipe(ctx, id, recipeReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockRecipeStore)(nil).UpdateRecipe), ctx, id, recipeReq)
}

{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API for the GoRecipes application, allowing users to manage and discover cooking recipes.",
        "title": "GoRecipes API",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support Team",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "v1"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/recipes": {
            "get": {
                "description": "Get a list of all recipes (basic details).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "List recipes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Recipe"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new recipe with ingredients, steps, and tags.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "Create a new recipe",
                "parameters": [
                    {
                        "description": "Recipe to create",
                        "name": "recipe",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RecipeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    }
                }
            }
        },
        "/recipes/{id}": {
            "get": {
                "description": "Get a single recipe by its UUID, including ingredients, steps, and tags.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "Get a recipe by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "404": {
                        "description": "Recipe not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing recipe by its UUID. All fields are replaced.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "Update an existing recipe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Recipe data to update",
                        "name": "recipe",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RecipeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Recipe"
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "404": {
                        "description": "Recipe not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a single recipe by its UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "Delete a recipe by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "404": {
                        "description": "Recipe not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.APIError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "description": "Optional: include HTTP status in body",
                    "type": "integer"
                }
            }
        },
        "models.MeasurementSystem": {
            "type": "string",
            "enum": [
                "metric",
                "imperial"
            ],
            "x-enum-varnames": [
                "Metric",
                "Imperial"
            ]
        },
        "models.MeasurementUnit": {
            "type": "object",
            "properties": {
                "abbreviation": {
                    "type": "string"
                },
                "base_unit_id": {
                    "type": "string"
                },
                "conversion_factor": {
                    "type": "number"
                },
                "id": {
                    "description": "Made pointer to handle NULL from LEFT JOIN",
                    "type": "string"
                },
                "name": {
                    "description": "Changed to pointer to handle NULL",
                    "type": "string"
                },
                "system": {
                    "description": "From common.go; Changed to pointer",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MeasurementSystem"
                        }
                    ]
                }
            }
        },
        "models.Recipe": {
            "type": "object",
            "properties": {
                "cook_time_minutes": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ingredients": {
                    "description": "Fields for related data, to be populated when fetching a full recipe",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RecipeIngredient"
                    }
                },
                "photo_filename": {
                    "type": "string"
                },
                "prep_time_minutes": {
                    "type": "integer"
                },
                "serves": {
                    "type": "integer"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RecipeStep"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Tag"
                    }
                },
                "title": {
                    "type": "string"
                },
                "total_time_minutes": {
                    "description": "Read-only from DB",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.RecipeIngredient": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ingredient_description": {
                    "description": "From Ingredient table",
                    "type": "string"
                },
                "ingredient_id": {
                    "type": "string"
                },
                "ingredient_name": {
                    "description": "Fields to populate from related tables for richer API responses",
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "sort_order": {
                    "type": "integer"
                },
                "unit": {
                    "description": "Populated from MeasurementUnit table",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MeasurementUnit"
                        }
                    ]
                },
                "unit_id": {
                    "type": "string"
                }
            }
        },
        "models.RecipeIngredientRequest": {
            "type": "object",
            "required": [
                "ingredient_name"
            ],
            "properties": {
                "ingredient_name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "sort_order": {
                    "type": "integer",
                    "minimum": 0
                },
                "unit_name": {
                    "description": "e.g., \"grams\", \"ml\", \"cup\"; backend will find or create",
                    "type": "string"
                }
            }
        },
        "models.RecipeRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "cook_time_minutes": {
                    "type": "integer",
                    "minimum": 0
                },
                "created_by": {
                    "description": "Optional, depends on auth context",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "ingredients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RecipeIngredientRequest"
                    }
                },
                "photo_filename": {
                    "type": "string",
                    "maxLength": 255
                },
                "prep_time_minutes": {
                    "type": "integer",
                    "minimum": 0
                },
                "serves": {
                    "type": "integer"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RecipeStepRequest"
                    }
                },
                "tags": {
                    "description": "For creating/associating tags by name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RecipeTagRequest"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "models.RecipeStep": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "duration_minutes": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "instruction": {
                    "type": "string"
                },
                "step_number": {
                    "type": "integer"
                },
                "temperature": {
                    "type": "string"
                }
            }
        },
        "models.RecipeStepRequest": {
            "type": "object",
            "required": [
                "instruction",
                "step_number"
            ],
            "properties": {
                "duration_minutes": {
                    "type": "integer",
                    "minimum": 0
                },
                "instruction": {
                    "type": "string",
                    "minLength": 1
                },
                "step_number": {
                    "type": "integer",
                    "minimum": 1
                },
                "temperature": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "models.RecipeTagRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "models.Tag": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Hex color code",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}